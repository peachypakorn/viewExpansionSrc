#include "s4_finalrecon.h"
/*
void S3_ReconMerge(hls::stream< t_nufft_output_complex > H[reconC],
					hls::stream< t_nufft_output_complex > L0[reconC],
				hls::stream< t_nufft_output_complex > LA[reconC],
				hls::stream< t_nufft_output_complex > LP[reconC],
		        hls::stream< t_recon_complex>  imDFTOut[reconC])
*/
#define reconC    3
t_recon_scalar R [512] = {
		286.51,3.3236,40.697,66.341,49.805,28.017,12.033,16.259,3.8357,-7.9743,-3.2222,-1.4826,-1.1397,0.29211,-2.2888,-1.1155,-1.0048,-2.3893,2.3422,1.626,-1.1664,0.61595,0.15913,0.64258,-0.35617,-2.8376,0.81487,0.79925,-1.5682,-0.30663,1.8507,0.67143,0.64743,0.68123,2.5139,-0.69124,-0.059146,-0.26804,2.1889,0.24772,0.65447,-0.19819,1.9854,0.27457,0.68848,1.3876,1.0437,1.9348,0.60388,0.78163,1.2658,0.88825,1.25,1.3499,-0.5337,1.1025,0.60188,1.1934,1.1986,0.80276,0.87194,1.6979,0.22111,1.1205,1.385,0.62308,0.93472,0.052155,0.27243,0.567,0.60566,1.0579,0.40212,0.59342,0.27803,0.56926,0.213,0.81345,0.1803,0.18219,0.019048,-0.35125,0.39363,0.60494,0.6574,0.25066,0.03878,0.55852,0.76789,-0.18675,0.5749,0.38195,0.23955,-0.11852,0.22006,0.31273,0.72582,0.3798,0.21039,0.35284,0.22239,0.50159,0.44028,0.28677,0.14303,0.26873,0.43307,0.25587,0.27023,0.45375,0.39818,0.30473,0.18874,0.32611,0.41924,0.32407,0.1385,0.30031,0.32729,0.3565,0.33926,0.36995,0.34466,0.30554,0.30717,0.44742,0.42881,0.37457,0.37592,0.42021,0.42695,0.48168,0.51614,0.55411,0.44471,0.43552,0.52126,0.56651,0.54026,0.51331,0.54492,0.54543,0.48889,0.53216,0.62785,0.5913,0.54561,0.50325,0.51847,0.53393,0.54657,0.54297,0.54363,0.43149,0.45349,0.51968,0.52454,0.4815,0.49254,0.49897,0.48697,0.42219,0.49108,0.54861,0.5039,0.43133,0.44006,0.4987,0.51213,0.48202,0.50686,0.52241,0.48181,0.48766,0.51014,0.52432,0.50452,0.49271,0.50389,0.50496,0.47939,0.53054,0.55007,0.54247,0.50252,0.50515,0.5292,0.52176,0.51199,0.51982,0.49461,0.46847,0.47568,0.49838,0.50714,0.47421,0.46081,0.4648,0.4555,0.45057,0.46622,0.45748,0.44224,0.42349,0.43992,0.4476,0.43467,0.43555,0.44724,0.43546,0.42189,0.42033,0.44143,0.44397,0.43311,0.43108,0.43018,0.42721,0.44045,0.45157,0.45111,0.44132,0.43755,0.45426,0.46092,0.45627,0.457,0.4605,0.45561,0.45488,0.4553,0.45911,0.45712,0.45032,0.4505,0.4466,0.44418,0.44559,0.44626,0.4432,0.43552,0.43462,0.43785,0.43748,0.4344,0.43333,0.42981,0.42379,0.42116,0.42253,0.42277,0.41846,0.41392,0.41259,0.41345,0.41377,0,0.41377,0.41345,0.41259,0.41392,0.41846,0.42277,0.42253,0.42116,0.42379,0.42981,0.43333,0.4344,0.43748,0.43785,0.43462,0.43552,0.4432,0.44626,0.44559,0.44418,0.4466,0.4505,0.45032,0.45712,0.45911,0.4553,0.45488,0.45561,0.4605,0.457,0.45627,0.46092,0.45426,0.43755,0.44132,0.45111,0.45157,0.44045,0.42721,0.43018,0.43108,0.43311,0.44397,0.44143,0.42033,0.42189,0.43546,0.44724,0.43555,0.43467,0.4476,0.43992,0.42349,0.44224,0.45748,0.46622,0.45057,0.4555,0.4648,0.46081,0.47421,0.50714,0.49838,0.47568,0.46847,0.49461,0.51982,0.51199,0.52176,0.5292,0.50515,0.50252,0.54247,0.55007,0.53054,0.47939,0.50496,0.50389,0.49271,0.50452,0.52432,0.51014,0.48766,0.48181,0.52241,0.50686,0.48202,0.51213,0.4987,0.44006,0.43133,0.5039,0.54861,0.49108,0.42219,0.48697,0.49897,0.49254,0.4815,0.52454,0.51968,0.45349,0.43149,0.54363,0.54297,0.54657,0.53393,0.51847,0.50325,0.54561,0.5913,0.62785,0.53216,0.48889,0.54543,0.54492,0.51331,0.54026,0.56651,0.52126,0.43552,0.44471,0.55411,0.51614,0.48168,0.42695,0.42021,0.37592,0.37457,0.42881,0.44742,0.30717,0.30554,0.34466,0.36995,0.33926,0.3565,0.32729,0.30031,0.1385,0.32407,0.41924,0.32611,0.18874,0.30473,0.39818,0.45375,0.27023,0.25587,0.43307,0.26873,0.14303,0.28677,0.44028,0.50159,0.22239,0.35284,0.21039,0.3798,0.72582,0.31273,0.22006,-0.11852,0.23955,0.38195,0.5749,-0.18675,0.76789,0.55852,0.03878,0.25066,0.6574,0.60494,0.39363,-0.35125,0.019048,0.18219,0.1803,0.81345,0.213,0.56926,0.27803,0.59342,0.40212,1.0579,0.60566,0.567,0.27243,0.052155,0.93472,0.62308,1.385,1.1205,0.22111,1.6979,0.87194,0.80276,1.1986,1.1934,0.60188,1.1025,-0.5337,1.3499,1.25,0.88825,1.2658,0.78163,0.60388,1.9348,1.0437,1.3876,0.68848,0.27457,1.9854,-0.19819,0.65447,0.24772,2.1889,-0.26804,-0.059146,-0.69124,2.5139,0.68123,0.64743,0.67143,1.8507,-0.30663,-1.5682,0.79925,0.81487,-2.8376,-0.35617,0.64258,0.15913,0.61595,-1.1664,1.626,2.3422,-2.3893,-1.0048,-1.1155,-2.2888,0.29211,-1.1397,-1.4826,-3.2222,-7.9743,3.8357,16.259,12.033,28.017,49.805,66.341,40.697,3.3236

};
t_recon_scalar I [512] = {
		0,-61.948,-21.462,6.7723,5.9366,-2.6929,3.0877,2.0797,-5.8181,-12.842,-13.053,-0.65797,-2.9391,-6.7486,-4.6941,-1.3259,-1.4575,0.10721,-3.7247,-0.66274,-0.41166,-3.5376,-2.6711,-3.1966,-1.7355,-3.6333,-1.9761,-1.8624,0.5704,-2.5869,-2.1294,-0.98295,-2.2519,-1.8808,-1.2707,-2.0966,-0.85038,-2.2423,-1.8054,0.28595,-1.867,0.25456,-0.71137,-0.6703,-1.5505,-0.84741,0.028966,0.43506,-1.7032,-0.57249,-0.64916,0.113,-0.35432,-0.67755,0.12588,0.92621,-0.98852,-0.73027,-0.14008,-0.24123,0.52102,0.05478,-0.78244,-0.51208,0.2424,0.61121,-0.13653,-0.20158,0.50735,-0.09102,0.086859,-0.1209,0.057916,0.60266,0.48822,-0.81457,0.26494,0.1715,0.35148,0.40071,0.04956,-0.082809,0.30097,-0.32161,0.45926,0.57134,0.2443,0.08396,0.11033,-0.17912,0.029779,0.43303,0.057349,-0.28677,-0.26183,0.24667,-0.22853,0.098278,-0.040766,-0.018194,0.038349,-0.24235,-0.35069,0.088612,-0.058709,-0.30755,-0.29968,-0.23543,-0.13143,-0.12232,-0.18808,-0.06198,-0.18597,-0.28052,-0.11427,-0.15349,-0.23776,-0.28326,-0.29214,-0.26254,-0.30995,-0.27321,-0.20676,-0.33543,-0.40692,-0.38361,-0.30527,-0.29934,-0.3921,-0.39976,-0.3739,-0.41187,-0.36943,-0.29025,-0.29731,-0.33023,-0.37893,-0.32897,-0.25155,-0.30049,-0.24489,-0.22613,-0.27087,-0.30458,-0.26094,-0.16835,-0.14762,-0.21878,-0.19578,-0.18512,-0.19377,-0.16361,-0.11547,-0.10886,-0.17561,-0.22636,-0.16722,-0.1289,-0.17613,-0.14935,-0.16322,-0.17811,-0.20675,-0.17964,-0.12325,-0.12904,-0.19877,-0.18032,-0.18398,-0.1769,-0.17633,-0.13855,-0.15526,-0.18689,-0.18524,-0.13663,-0.13577,-0.16195,-0.1426,-0.12839,-0.1429,-0.1782,-0.13973,-0.084983,-0.097482,-0.12562,-0.10995,-0.098218,-0.081772,-0.075815,-0.056185,-0.066636,-0.087826,-0.090478,-0.049665,-0.047973,-0.050757,-0.060104,-0.054902,-0.067239,-0.070378,-0.048219,-0.03868,-0.067856,-0.071089,-0.064623,-0.061992,-0.062259,-0.065936,-0.051982,-0.057242,-0.077598,-0.077614,-0.066972,-0.06274,-0.063512,-0.068652,-0.071431,-0.079212,-0.074747,-0.052004,-0.053572,-0.064913,-0.06418,-0.054616,-0.042812,-0.042041,-0.037355,-0.026014,-0.026632,-0.026676,-0.014786,-0.0074549,-0.002526,0.00039074,0.0040911,0.008824,0.0086778,0.016537,0.024014,0.027175,0.02726,0.030837,0.036779,0.042595,0.049729,0.055933,0.060041,0.060198,0.064066,0.071228,0.078487,0.081897,0.084242,0.088891,0.097239,0,-0.097239,-0.088891,-0.084242,-0.081897,-0.078487,-0.071228,-0.064066,-0.060198,-0.060041,-0.055933,-0.049729,-0.042595,-0.036779,-0.030837,-0.02726,-0.027175,-0.024014,-0.016537,-0.0086778,-0.008824,-0.0040911,-0.00039074,0.002526,0.0074549,0.014786,0.026676,0.026632,0.026014,0.037355,0.042041,0.042812,0.054616,0.06418,0.064913,0.053572,0.052004,0.074747,0.079212,0.071431,0.068652,0.063512,0.06274,0.066972,0.077614,0.077598,0.057242,0.051982,0.065936,0.062259,0.061992,0.064623,0.071089,0.067856,0.03868,0.048219,0.070378,0.067239,0.054902,0.060104,0.050757,0.047973,0.049665,0.090478,0.087826,0.066636,0.056185,0.075815,0.081772,0.098218,0.10995,0.12562,0.097482,0.084983,0.13973,0.1782,0.1429,0.12839,0.1426,0.16195,0.13577,0.13663,0.18524,0.18689,0.15526,0.13855,0.17633,0.1769,0.18398,0.18032,0.19877,0.12904,0.12325,0.17964,0.20675,0.17811,0.16322,0.14935,0.17613,0.1289,0.16722,0.22636,0.17561,0.10886,0.11547,0.16361,0.19377,0.18512,0.19578,0.21878,0.14762,0.16835,0.26094,0.30458,0.27087,0.22613,0.24489,0.30049,0.25155,0.32897,0.37893,0.33023,0.29731,0.29025,0.36943,0.41187,0.3739,0.39976,0.3921,0.29934,0.30527,0.38361,0.40692,0.33543,0.20676,0.27321,0.30995,0.26254,0.29214,0.28326,0.23776,0.15349,0.11427,0.28052,0.18597,0.06198,0.18808,0.12232,0.13143,0.23543,0.29968,0.30755,0.058709,-0.088612,0.35069,0.24235,-0.038349,0.018194,0.040766,-0.098278,0.22853,-0.24667,0.26183,0.28677,-0.057349,-0.43303,-0.029779,0.17912,-0.11033,-0.08396,-0.2443,-0.57134,-0.45926,0.32161,-0.30097,0.082809,-0.04956,-0.40071,-0.35148,-0.1715,-0.26494,0.81457,-0.48822,-0.60266,-0.057916,0.1209,-0.086859,0.09102,-0.50735,0.20158,0.13653,-0.61121,-0.2424,0.51208,0.78244,-0.05478,-0.52102,0.24123,0.14008,0.73027,0.98852,-0.92621,-0.12588,0.67755,0.35432,-0.113,0.64916,0.57249,1.7032,-0.43506,-0.028966,0.84741,1.5505,0.6703,0.71137,-0.25456,1.867,-0.28595,1.8054,2.2423,0.85038,2.0966,1.2707,1.8808,2.2519,0.98295,2.1294,2.5869,-0.5704,1.8624,1.9761,3.6333,1.7355,3.1966,2.6711,3.5376,0.41166,0.66274,3.7247,-0.10721,1.4575,1.3259,4.6941,6.7486,2.9391,0.65797,13.053,12.842,5.8181,-2.0797,-3.0877,2.6929,-5.9366,-6.7723,21.462,61.948

};
int main() {
	hls::stream< t_recon_complex > DFTin("in");

	hls::stream< PIXEL_RAW>  sigOut;
	hls::stream<ifft_out_t> outf;
	for(int k=0;k<1;k++) {
		for(int i=0;i<512;i++) {
			t_recon_complex v;
			if(k==0) v = t_recon_complex(R[i],I[i]);
			else v= t_recon_complex( rand()%100, rand()%100);
				DFTin.write(v);

			}

	}
S4_finalrecon(DFTin,sigOut,outf);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);
//S4_finalrecon(DFTin,sigOut);

	FILE * fo = fopen("pyr_out.txt", " wb");
	for(int i=0;i<512;i++)
	//for(int i=0;i<2992;i++)
	//while(!pyrFilOut.empty())
	{
		PIXEL_RAW val = sigOut.read();
		//std::cout << val << std::endl;
		ifft_out_t v = outf.read();
		fprintf(fo, "%d %f\n",val.to_uint()&255, v.to_float() );
		//printf( "%.8f  %.8f\n", val.real().to_float(), val.imag().to_float());
		std::cout << (val.to_uint()&255)<< v <<  std::endl;
	}
	fclose(fo);

return 0;
}
