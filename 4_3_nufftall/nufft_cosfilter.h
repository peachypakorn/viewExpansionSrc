#ifndef __NUFFT_COSFILTER__
#define __NUFFT_COSFILTER__
#include "common_type.h"

#define  COSINVTAB_SIZE   512

static const t_input_scalar cosInvTab[] = {1.00000000, 1.00000471, 1.00001883, 1.00004236, 1.00007530, 1.00011767, 1.00016945, 1.00023065, 1.00030127, 1.00038132, 1.00047080, 1.00056972, 1.00067807, 1.00079587, 1.00092312, 1.00105983, 1.00120600, 1.00136163, 1.00152675, 1.00170134, 1.00188544, 1.00207903, 1.00228213, 1.00249475, 1.00271690, 1.00294860, 1.00318984, 1.00344065, 1.00370103, 1.00397101, 1.00425058, 1.00453976, 1.00483857, 1.00514703, 1.00546513, 1.00579292, 1.00613038, 1.00647755, 1.00683444, 1.00720107, 1.00757745, 1.00796360, 1.00835955, 1.00876530, 1.00918089, 1.00960632, 1.01004162, 1.01048681, 1.01094192, 1.01140696, 1.01188196, 1.01236693, 1.01286191, 1.01336692, 1.01388197, 1.01440711, 1.01494234, 1.01548771, 1.01604323, 1.01660893, 1.01718484, 1.01777099, 1.01836741, 1.01897412, 1.01959116, 1.02021855, 1.02085633, 1.02150453, 1.02216319, 1.02283232, 1.02351197, 1.02420217, 1.02490296, 1.02561436, 1.02633643, 1.02706918, 1.02781266, 1.02856691, 1.02933196, 1.03010785, 1.03089462, 1.03169231, 1.03250097, 1.03332063, 1.03415133, 1.03499311, 1.03584603, 1.03671012, 1.03758543, 1.03847199, 1.03936987, 1.04027910, 1.04119973, 1.04213181, 1.04307539, 1.04403051, 1.04499723, 1.04597559, 1.04696566, 1.04796747, 1.04898108, 1.05000655, 1.05104393, 1.05209327, 1.05315463, 1.05422807, 1.05531364, 1.05641140, 1.05752142, 1.05864374, 1.05977844, 1.06092556, 1.06208518, 1.06325736, 1.06444215, 1.06563964, 1.06684987, 1.06807291, 1.06930885, 1.07055773, 1.07181963, 1.07309463, 1.07438279, 1.07568417, 1.07699887, 1.07832695, 1.07966848, 1.08102353, 1.08239220, 1.08377455, 1.08517066, 1.08658062, 1.08800449, 1.08944237, 1.09089434, 1.09236048, 1.09384088, 1.09533561, 1.09684478, 1.09836846, 1.09990675, 1.10145973, 1.10302751, 1.10461016, 1.10620779, 1.10782049, 1.10944836, 1.11109149, 1.11274999, 1.11442395, 1.11611347, 1.11781866, 1.11953963, 1.12127647, 1.12302929, 1.12479821, 1.12658333, 1.12838476, 1.13020262, 1.13203702, 1.13388807, 1.13575589, 1.13764060, 1.13954232, 1.14146118, 1.14339728, 1.14535076, 1.14732175, 1.14931037, 1.15131675, 1.15334102, 1.15538331, 1.15744377, 1.15952252, 1.16161971, 1.16373546, 1.16586994, 1.16802327, 1.17019560, 1.17238709, 1.17459787, 1.17682811, 1.17907795, 1.18134755, 1.18363707, 1.18594667, 1.18827650, 1.19062673, 1.19299753, 1.19538906, 1.19780150, 1.20023501, 1.20268977, 1.20516597, 1.20766377, 1.21018336, 1.21272492, 1.21528865, 1.21787473, 1.22048334, 1.22311470, 1.22576898, 1.22844640, 1.23114716, 1.23387145, 1.23661950, 1.23939150, 1.24218768, 1.24500825, 1.24785342, 1.25072344, 1.25361851, 1.25653886, 1.25948474, 1.26245638, 1.26545401, 1.26847787, 1.27152822, 1.27460530, 1.27770937, 1.28084068, 1.28399948, 1.28718606, 1.29040066, 1.29364357, 1.29691505, 1.30021540, 1.30354488, 1.30690379, 1.31029242, 1.31371107, 1.31716003, 1.32063962, 1.32415013, 1.32769188, 1.33126520, 1.33487040, 1.33850782, 1.34217777, 1.34588062, 1.34961668, 1.35338632, 1.35718989, 1.36102775, 1.36490025, 1.36880778, 1.37275070, 1.37672939, 1.38074426, 1.38479568, 1.38888405, 1.39300979, 1.39717330, 1.40137501, 1.40561533, 1.40989470, 1.41421356, 1.40989470, 1.40561533, 1.40137501, 1.39717330, 1.39300979, 1.38888405, 1.38479568, 1.38074426, 1.37672939, 1.37275070, 1.36880778, 1.36490025, 1.36102775, 1.35718989, 1.35338632, 1.34961668, 1.34588062, 1.34217777, 1.33850782, 1.33487040, 1.33126520, 1.32769188, 1.32415013, 1.32063962, 1.31716003, 1.31371107, 1.31029242, 1.30690379, 1.30354488, 1.30021540, 1.29691505, 1.29364357, 1.29040066, 1.28718606, 1.28399948, 1.28084068, 1.27770937, 1.27460530, 1.27152822, 1.26847787, 1.26545401, 1.26245638, 1.25948474, 1.25653886, 1.25361851, 1.25072344, 1.24785342, 1.24500825, 1.24218768, 1.23939150, 1.23661950, 1.23387145, 1.23114716, 1.22844640, 1.22576898, 1.22311470, 1.22048334, 1.21787473, 1.21528865, 1.21272492, 1.21018336, 1.20766377, 1.20516597, 1.20268977, 1.20023501, 1.19780150, 1.19538906, 1.19299753, 1.19062673, 1.18827650, 1.18594667, 1.18363707, 1.18134755, 1.17907795, 1.17682811, 1.17459787, 1.17238709, 1.17019560, 1.16802327, 1.16586994, 1.16373546, 1.16161971, 1.15952252, 1.15744377, 1.15538331, 1.15334102, 1.15131675, 1.14931037, 1.14732175, 1.14535076, 1.14339728, 1.14146118, 1.13954232, 1.13764060, 1.13575589, 1.13388807, 1.13203702, 1.13020262, 1.12838476, 1.12658333, 1.12479821, 1.12302929, 1.12127647, 1.11953963, 1.11781866, 1.11611347, 1.11442395, 1.11274999, 1.11109149, 1.10944836, 1.10782049, 1.10620779, 1.10461016, 1.10302751, 1.10145973, 1.09990675, 1.09836846, 1.09684478, 1.09533561, 1.09384088, 1.09236048, 1.09089434, 1.08944237, 1.08800449, 1.08658062, 1.08517066, 1.08377455, 1.08239220, 1.08102353, 1.07966848, 1.07832695, 1.07699887, 1.07568417, 1.07438279, 1.07309463, 1.07181963, 1.07055773, 1.06930885, 1.06807291, 1.06684987, 1.06563964, 1.06444215, 1.06325736, 1.06208518, 1.06092556, 1.05977844, 1.05864374, 1.05752142, 1.05641140, 1.05531364, 1.05422807, 1.05315463, 1.05209327, 1.05104393, 1.05000655, 1.04898108, 1.04796747, 1.04696566, 1.04597559, 1.04499723, 1.04403051, 1.04307539, 1.04213181, 1.04119973, 1.04027910, 1.03936987, 1.03847199, 1.03758543, 1.03671012, 1.03584603, 1.03499311, 1.03415133, 1.03332063, 1.03250097, 1.03169231, 1.03089462, 1.03010785, 1.02933196, 1.02856691, 1.02781266, 1.02706918, 1.02633643, 1.02561436, 1.02490296, 1.02420217, 1.02351197, 1.02283232, 1.02216319, 1.02150453, 1.02085633, 1.02021855, 1.01959116, 1.01897412, 1.01836741, 1.01777099, 1.01718484, 1.01660893, 1.01604323, 1.01548771, 1.01494234, 1.01440711, 1.01388197, 1.01336692, 1.01286191, 1.01236693, 1.01188196, 1.01140696, 1.01094192, 1.01048681, 1.01004162, 1.00960632, 1.00918089, 1.00876530, 1.00835955, 1.00796360, 1.00757745, 1.00720107, 1.00683444, 1.00647755, 1.00613038, 1.00579292, 1.00546513, 1.00514703, 1.00483857, 1.00453976, 1.00425058, 1.00397101, 1.00370103, 1.00344065, 1.00318984, 1.00294860, 1.00271690, 1.00249475, 1.00228213, 1.00207903, 1.00188544, 1.00170134, 1.00152675, 1.00136163, 1.00120600, 1.00105983, 1.00092312, 1.00079587, 1.00067807, 1.00056972, 1.00047080, 1.00038132, 1.00030127, 1.00023065, 1.00016945, 1.00011767, 1.00007530, 1.00004236, 1.00001883, 1.00000471};

// This is after FFT
template <int C, typename T>
void nufft_cosfilter(hls::stream< T > nufftIn[C],
					 hls::stream< T > nufftOut[C],
					 const int nL, const int m) {
	int k=0;
#pragma HLS inline
	const int sK = COSINVTAB_SIZE/nL;
#pragma HLS data_pack variable=nufftIn
#pragma HLS data_pack variable=nufftOut

#pragma HLS DATAFLOW
	for(int i=0;i<m*nL;i++) {
#pragma HLS PIPELINE
		int cosIdx = i;

		for(int c=0;c<C;c++) {
			T val = nufftIn[c].read();
			if (i < (nL/2) || i >= (m*nL) -(nL/2)) {
				t_input_scalar invCosVal = cosInvTab[k];
				T valOut( val.real() * invCosVal, val.imag() * invCosVal );
				nufftOut[c].write(valOut);
			}
		}
		if (i < (nL/2) || i >= (m*nL) -(nL/2)) {
			k += sK;
		}

	}
}



// This is after FFT
template <int C, typename T>
void nufft_cosfilter1024(hls::stream< T > &nufftIn,
					 hls::stream< T > &nufftOut) {
	int k=0;
#pragma HLS inline off
	//const int sK = COSINVTAB_SIZE/nL;
#pragma HLS data_pack variable=nufftIn
#pragma HLS data_pack variable=nufftOut

//#pragma HLS DATAFLOW
	for(int i=0;i<256;i++) {
#pragma HLS PIPELINE rewind
		t_input_scalar invCosVal = cosInvTab[i]>>2;
		//for(int c=0;c<C;c++) {
			T val = nufftIn.read();
			T valOut( val.real() * invCosVal , val.imag() * invCosVal );
			nufftOut.write(valOut);
		//}
	}
	for(int i=0;i<512;i++) {
#pragma HLS PIPELINE rewind
		//for(int c=0;c<C;c++) {
			T val = nufftIn.read();
	//	}
	}
	for(int i=0;i<256;i++) {
#pragma HLS PIPELINE rewind
		t_input_scalar invCosVal = cosInvTab[i + 256]>>2;
		//for(int c=0;c<C;c++) {
			T val = nufftIn.read();
			T valOut( val.real() * invCosVal, val.imag() * invCosVal );
			nufftOut.write(valOut);
		//}
	}
}

// This is after FFT
template < typename T>
void nufft_cosfilter_single(hls::stream< T > &nufftIn,
					 hls::stream< T > &nufftOut,
					 const int nL, const int m) {
	int k=0;
#pragma HLS inline
	const int sK = COSINVTAB_SIZE/nL;
#pragma HLS data_pack variable=nufftIn
#pragma HLS data_pack variable=nufftOut

#pragma HLS DATAFLOW
	for(int i=0;i<m*nL;i++) {
#pragma HLS PIPELINE
	int cosIdx = i;


		T val = nufftIn.read();
		if (i < (nL/2) || i >= (m*nL) -(nL/2)) {
			t_input_scalar invCosVal = cosInvTab[k]<<1;
			T valOut( val.real() * invCosVal, val.imag() * invCosVal );
			nufftOut.write(valOut);
		}

		if (i < (nL/2) || i >= (m*nL) -(nL/2)) {
			k += sK;
		}
	}

}


#endif
